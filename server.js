// 这个文件未完成
const fs = require('fs');
const path = require('path');
const express = require('express');
const LRU = require('lru-cache'); // 删除使用率低的缓存
const favicon = require('serve-favicon');
const compression = require('compression');
const proxyMiddleware = require('http-proxy-middleware'); // 中间代理
const { createBundleRenderer } = require('vue-server-renderer');
const port = process.env.PORT || 9237;
const isProd = process.env.NODE_ENV === 'production';
const config = require('./config');

const resolve = file => path.resolve(__dirname, config.build.assetsRoot, file);

const temp = fs.readFileSync(config.build.index, 'utf-8');
const template = temp.replace('<div id=app></div>', '<!--vue-ssr-outlet-->');

const app = express();

// In production: create server renderer using built server bundle.
// The server bundle is generated by vue-ssr-webpack-plugin.
const bundle = require(resolve('./vue-ssr-bundle.json')); // json 数据
// The client manifests are optional, but it allows the renderer
// to automatically infer preload/prefetch links and directly add <script>
// tags for any async chunks used during render, avoiding waterfall requests.
// const clientManifest = require('./dist/vue-ssr-client-manifest.json');
const renderer = createBundleRenderer(bundle, {
  template,
  // clientManifest,
  // for component caching
  cache: LRU({
    max: 1000,
    maxAge: 1000 * 60 * 15,
  }),
  // this is only needed when vue-server-renderer is npm-linked
  // 包地址的引用, https://github.com/vuejs/vue/commit/8d885128371c81994715691c81d161b3768706dd
  basedir: path.resolve(__dirname),
  // recommended for performance
  runInNewContext: false,
});

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0,
});

app.use(compression({ threshold: 0 }));
app.use(favicon(resolve('./static/favicon.png')));
app.use('/static', serve('./static', true));
// app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./service-worker.js'));

// API 代理配置
const proxyTable = config.dev.proxyTable;
Object.keys(proxyTable).forEach((context) => {
  let options = proxyTable[context];
  if (typeof options === 'string') {
    options = { target: options };
  }
  app.use(proxyMiddleware(options.filter || context, options));
});

const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

const microCache = LRU({
  max: 100,
  maxAge: 1000,
});

app.get('*', (req, res) => {
  const s = Date.now();

  res.setHeader('Content-Type', 'text/html');
  res.setHeader('Server', serverInfo);

  const handleError = (err) => {
    if (err.url) {
      res.redirect(err.url);
    } else if (err.code === 404) {
      res.status(404).end('404 | Page Not Found');
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error');
      console.error(`error during render : ${req.url}`);
      console.error(err.stack);
    }
  };

  const cacheable = process.env.MICRO_CACHE !== 'false';
  if (cacheable) {
    const hit = microCache.get(req.url);
    if (hit) {
      if (!isProd) {
        console.log('cache hit!');
      }
      return res.end(hit);
    }
  }

  const context = {
    title: 'Vue HN 2.0', // default title
    url: req.url,
  };
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err);
    }
    res.end(html);
    if (cacheable) {
      microCache.set(req.url, html);
    }
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`);
    }
  });
});

app.listen(port, () => {
  console.log(`server started at http://localhost:${port}`);
});
