// 这个文件未完成
const fs = require('fs');
const path = require('path');
const express = require('express');
const LRU = require('lru-cache'); // 删除使用率低的缓存
const favicon = require('serve-favicon');
const compression = require('compression');

const resolve = file => path.resolve(__dirname, file);

const isProd = process.env.NODE_ENV === 'production';
const useMicroCache = process.env.MICRO_CACHE !== 'false';
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;


const app = express();
const config = require('./config/index.js');

const serviceRender = config.serviceRender;

function createRenderer(bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15,
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false,
  }));
}

let renderer;
let readyPromise;
// if (isProd && serviceRender) {
if (isProd) {
  // const bundle = require('./dist/vue-ssr-bundle.json');
  // const template = fs.readFileSync(resolve('./dist/index.html'), 'utf-8');
  // renderer = createRenderer(bundle, template);

  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json');
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json');
  renderer = createRenderer(bundle, {
    clientManifest,
  });
} else {
  // require('./build/setup-dev-server')(app, (bundle, template) => {
  readyPromise = require('./build/dev-server')(app, (bundle, template) => {
    renderer = createRenderer(bundle, template);
  });
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0,
});

app.use(compression({ threshold: 0 }));
app.use(favicon('./dist/static/favicon.png'));
app.use('/static', serve('./dist/static', true));
// app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'));

const isCacheable = req => useMicroCache;
const microCache = LRU({
  max: 100,
  maxAge: 1000,
});

// function render(req, res) {
//   const s = Date.now();

//   res.setHeader('Content-Type', 'text/html');
//   res.setHeader('Server', serverInfo);

//   const handleError = (err) => {
//     if (err.url) {
//       res.redirect(err.url);
//     } else if (err.code === 404) {
//       res.status(404).end('404 | Page Not Found');
//     } else {
//       // Render Error Page or Redirect
//       res.status(500).end('500 | Internal Server Error');
//       console.error(`error during render : ${req.url}`);
//       console.error(err.stack);
//     }
//   };

//   const cacheable = isCacheable(req);
//   if (cacheable) {
//     const hit = microCache.get(req.url);
//     if (hit) {
//       if (!isProd) {
//         console.log('cache hit!');
//       }
//       return res.end(hit);
//     }
//   }

//   const context = {
//     title: 'Vue HN 2.0', // default title
//     url: req.url,
//   };
//   renderer.renderToString(context, (err, html) => {
//     if (err) {
//       return handleError(err);
//     }
//     res.end(html);
//     if (cacheable) {
//       microCache.set(req.url, html);
//     }
//     if (!isProd) {
//       console.log(`whole request: ${Date.now() - s}ms`);
//     }
//   });
// }

// app.get('*', isProd ? render : (req, res) => {
//   readyPromise.then(() => render(req, res));
// });

const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log(`server started at localhost:${port}`);
});
